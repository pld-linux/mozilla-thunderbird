--- comm-release/mozilla/media/webrtc/trunk/webrtc/modules/video_coding/codecs/vp8/vp8_impl.cc~	2014-06-13 02:45:44.000000000 +0200
+++ comm-release/mozilla/media/webrtc/trunk/webrtc/modules/video_coding/codecs/vp8/vp8_impl.cc	2015-05-23 22:04:53.241382776 +0200
@@ -180,7 +180,7 @@
   // Creating a wrapper to the image - setting image data to NULL. Actual
   // pointer will be set in encode. Setting align to 1, as it is meaningless
   // (actual memory is not allocated).
-  raw_ = vpx_img_wrap(NULL, IMG_FMT_I420, codec_.width, codec_.height,
+  raw_ = vpx_img_wrap(NULL, VPX_IMG_FMT_I420, codec_.width, codec_.height,
                       1, NULL);
   // populate encoder configuration with default values
   if (vpx_codec_enc_config_default(vpx_codec_vp8_cx(), config_, 0)) {
@@ -349,9 +349,9 @@
   }
   // Image in vpx_image_t format.
   // Input image is const. VP8's raw image is not defined as const.
-  raw_->planes[PLANE_Y] = const_cast<uint8_t*>(input_image.buffer(kYPlane));
-  raw_->planes[PLANE_U] = const_cast<uint8_t*>(input_image.buffer(kUPlane));
-  raw_->planes[PLANE_V] = const_cast<uint8_t*>(input_image.buffer(kVPlane));
+  raw_->planes[VPX_PLANE_Y] = const_cast<uint8_t*>(input_image.buffer(kYPlane));
+  raw_->planes[VPX_PLANE_U] = const_cast<uint8_t*>(input_image.buffer(kUPlane));
+  raw_->planes[VPX_PLANE_V] = const_cast<uint8_t*>(input_image.buffer(kVPlane));
   // TODO(mikhal): Stride should be set in initialization.
   raw_->stride[VPX_PLANE_Y] = input_image.stride(kYPlane);
   raw_->stride[VPX_PLANE_U] = input_image.stride(kUPlane);
--- mozilla/mozilla/content/media/encoder/VP8TrackEncoder.cpp~	2015-02-25 19:21:17.000000000 +0100
+++ mozilla/mozilla/content/media/encoder/VP8TrackEncoder.cpp	2015-05-23 22:11:33.299057650 +0200
@@ -84,7 +84,7 @@
   // Creating a wrapper to the image - setting image data to NULL. Actual
   // pointer will be set in encode. Setting align to 1, as it is meaningless
   // (actual memory is not allocated).
-  vpx_img_wrap(mVPXImageWrapper, IMG_FMT_I420,
+  vpx_img_wrap(mVPXImageWrapper, VPX_IMG_FMT_I420,
                mFrameWidth, mFrameHeight, 1, nullptr);
 
   config.g_w = mFrameWidth;
@@ -239,9 +239,9 @@
   uint8_t *cb = mMuteFrame.Elements() + yPlaneSize;
   uint8_t *cr = mMuteFrame.Elements() + yPlaneSize + uvPlaneSize;
 
-  mVPXImageWrapper->planes[PLANE_Y] = y;
-  mVPXImageWrapper->planes[PLANE_U] = cb;
-  mVPXImageWrapper->planes[PLANE_V] = cr;
+  mVPXImageWrapper->planes[VPX_PLANE_Y] = y;
+  mVPXImageWrapper->planes[VPX_PLANE_U] = cb;
+  mVPXImageWrapper->planes[VPX_PLANE_V] = cr;
   mVPXImageWrapper->stride[VPX_PLANE_Y] = mFrameWidth;
   mVPXImageWrapper->stride[VPX_PLANE_U] = halfWidth;
   mVPXImageWrapper->stride[VPX_PLANE_V] = halfWidth;
@@ -297,9 +297,9 @@
     const PlanarYCbCrImage::Data *data = yuv->GetData();
 
     if (isYUV420(data) && !data->mCbSkip) { // 420 planar
-      mVPXImageWrapper->planes[PLANE_Y] = data->mYChannel;
-      mVPXImageWrapper->planes[PLANE_U] = data->mCbChannel;
-      mVPXImageWrapper->planes[PLANE_V] = data->mCrChannel;
+      mVPXImageWrapper->planes[VPX_PLANE_Y] = data->mYChannel;
+      mVPXImageWrapper->planes[VPX_PLANE_U] = data->mCbChannel;
+      mVPXImageWrapper->planes[VPX_PLANE_V] = data->mCrChannel;
       mVPXImageWrapper->stride[VPX_PLANE_Y] = data->mYStride;
       mVPXImageWrapper->stride[VPX_PLANE_U] = data->mCbCrStride;
       mVPXImageWrapper->stride[VPX_PLANE_V] = data->mCbCrStride;
@@ -355,9 +355,9 @@
         return NS_ERROR_NOT_IMPLEMENTED;
       }
 
-      mVPXImageWrapper->planes[PLANE_Y] = y;
-      mVPXImageWrapper->planes[PLANE_U] = cb;
-      mVPXImageWrapper->planes[PLANE_V] = cr;
+      mVPXImageWrapper->planes[VPX_PLANE_Y] = y;
+      mVPXImageWrapper->planes[VPX_PLANE_U] = cb;
+      mVPXImageWrapper->planes[VPX_PLANE_V] = cr;
       mVPXImageWrapper->stride[VPX_PLANE_Y] = mFrameWidth;
       mVPXImageWrapper->stride[VPX_PLANE_U] = halfWidth;
       mVPXImageWrapper->stride[VPX_PLANE_V] = halfWidth;
